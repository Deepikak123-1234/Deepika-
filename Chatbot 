{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN+2UxBKBubOpSuaDAfLn/k"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XxagwEUGxqFT","outputId":"80af8427-8cd6-4031-a6c7-f0bf1b8f09a8"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Chatbot: Hello! How can I assist you today? (Type 'exit' to stop)\n","Chatbot: Error: Unable to connect to API.\n"]}],"source":["import requests\n","import json\n","\n","def chatbot():\n","    api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\"\n","    headers = {'Content-Type': 'application/json'}\n","\n","    print(\"Chatbot: Hello! How can I assist you today? (Type 'exit' to stop)\")\n","\n","    while True:\n","        user_input = input(\"You: \")\n","        if user_input.lower() == 'exit':\n","            print(\"Chatbot: Goodbye!\")\n","            break\n","\n","        data = {\n","            \"contents\": [{\"parts\": [{\"text\": user_input}]}]\n","        }\n","\n","        response = requests.post(api_url, headers=headers, data=json.dumps(data))\n","\n","        if response.status_code == 200:\n","            reply = response.json().get(\"candidates\", [{}])[0].get(\"content\", \"I'm sorry, I couldn't process that.\")\n","        else:\n","            reply = \"Error: Unable to connect to API.\"\n","\n","        print(f\"Chatbot: {reply}\")\n","\n","if __name__ == \"__main__\":\n","    chatbot()"]},{"cell_type":"code","source":["\n","\n","# Install required libraries\n","!pip install gradio transformers torch gtts --quiet\n","\n","# Import necessary libraries\n","import gradio as gr\n","from transformers import pipeline\n","from gtts import gTTS\n","import os\n","\n","# Define translation models for South Indian languages\n","translation_models = {\n","    \"English to Tamil\": \"Helsinki-NLP/opus-mt-en-ta\",\n","    \"English to Telugu\": \"Helsinki-NLP/opus-mt-en-te\",\n","    \"English to Kannada\": \"Helsinki-NLP/opus-mt-en-kn\",\n","    \"English to Malayalam\": \"Helsinki-NLP/opus-mt-en-ml\"\n","}\n","\n","# Function to translate text\n","def translate_text(text, language):\n","    model_name = translation_models[language]\n","    translator = pipeline(\"translation\", model=model_name)\n","    translated_text = translator(text)[0][\"translation_text\"]\n","\n","    # Generate speech\n","    tts = gTTS(translated_text, lang=\"ta\" if \"Tamil\" in language else\n","                                   \"te\" if \"Telugu\" in language else\n","                                   \"kn\" if \"Kannada\" in language else\n","                                   \"ml\")  # Malayalam\n","\n","    audio_path = \"translated_speech.mp3\"\n","    tts.save(audio_path)\n","\n","    return translated_text, audio_path\n","\n","# Create a Gradio interface with dropdown for language selection\n","iface = gr.Interface(\n","    fn=translate_text,\n","    inputs=[\n","        gr.Textbox(lines=3, placeholder=\"Enter text in English...\"),\n","        gr.Dropdown(choices=list(translation_models.keys()), label=\"Select Target Language\")\n","    ],\n","    outputs=[gr.Textbox(label=\"Translated Text\"), gr.Audio(label=\"Text-to-Speech Output\")],\n","    title=\"South Indian Language Translator + TTS\",\n","    description=\"Enter text in English, select a South Indian language, and get the translated text with speech output.\"\n",")\n","\n","# Launch the Gradio app\n","iface.launch(share=True)"],"metadata":{"id":"a52oWSt3M_-0"},"execution_count":null,"outputs":[]}]}